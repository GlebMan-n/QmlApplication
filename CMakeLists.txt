cmake_minimum_required(VERSION 3.1)

project(EmiliaCockpit LANGUAGES CXX)
set(PROJECT_VERSION "0.1")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt5 COMPONENTS Core Quick Svg Sql REQUIRED)

file(GLOB SRCS src/*.cpp)

add_executable(${PROJECT_NAME} "${SRCS}" "qml.qrc")
target_compile_definitions(${PROJECT_NAME} PRIVATE $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:QT_QML_DEBUG>)
target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Core Qt5::Quick Qt5::Sql)

if (CMAKE_BUILD_TYPE MATCHES "^[Rr]elease")
  set(CPACK_PACKAGE_NAME "EmiliaCockpit")
  set(CPACK_PACKAGE_VENDOR "Sophic Medical, LLC")
  set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "EmiliaCockpit UI")
  set(CPACK_PACKAGE_DESCRIPTION_FILE ${CMAKE_SOURCE_DIR}/Copyright.txt)
  set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
  set(CPACK_RESOURCE_FILE_README ${CMAKE_SOURCE_DIR}/README.md)
  set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_SOURCE_DIR}/Copyright.txt)
  set(CPACK_PACKAGE_CONTACT "leonardo.orellano@sophicmedical.net")
  set(CPACK_STRIP_FILES ${PROJECT_NAME})

  set(CPACK_GENERATOR "TBZ2")
  set(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-linux-${CMAKE_HOST_SYSTEM_PROCESSOR}")
  install(TARGETS ${PROJECT_NAME} DESTINATION .)

  set (LIBICU_VERSION "56")
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5EglFSDeviceIntegration.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5EglFSDeviceIntegration.so.${Qt5Widgets_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5XcbQpa.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5XcbQpa.so.${Qt5Widgets_VERSION} DESTINATION .)
  install(DIRECTORY ${CMAKE_PREFIX_PATH}/plugins/xcbglintegrations DESTINATION .)

  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Core.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Core.so.${Qt5Core_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5DBus.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5DBus.so.${Qt5Core_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Gui.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Gui.so.${Qt5Gui_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Network.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Network.so.${Qt5Network_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Qml.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Qml.so.${Qt5Qml_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Quick.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Quick.so.${Qt5Quick_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Sql.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Sql.so.${Qt5Sql_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Svg.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Svg.so.${Qt5Svg_VERSION} DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Widgets.so.5 DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/lib/libQt5Widgets.so.${Qt5Widgets_VERSION} DESTINATION .)
  install(DIRECTORY ${CMAKE_PREFIX_PATH}/plugins/bearer DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/plugins/iconengines/libqsvgicon.so DESTINATION iconengines)
  install(DIRECTORY ${CMAKE_PREFIX_PATH}/plugins/imageformats DESTINATION .)
  install(DIRECTORY ${CMAKE_PREFIX_PATH}/plugins/platforms DESTINATION .)
  install(FILES ${CMAKE_PREFIX_PATH}/plugins/qmltooling/libqmldbg_tcp.so DESTINATION qmltooling)
  install(FILES ${CMAKE_PREFIX_PATH}/plugins/sqldrivers/libqsqlite.so DESTINATION sqldrivers)
  install(FILES ${CMAKE_PREFIX_PATH}/plugins/sqldrivers/libqsqlpsql.so DESTINATION sqldrivers)
  install(FILES ${CMAKE_PREFIX_PATH}/plugins/sqldrivers/libqsqlodbc.so DESTINATION sqldrivers)
  install(DIRECTORY ${CMAKE_PREFIX_PATH}/qml/QtQuick/Controls DESTINATION QtQuick)
  install(DIRECTORY ${CMAKE_PREFIX_PATH}/qml/QtQuick/Layouts DESTINATION QtQuick)
  install(DIRECTORY ${CMAKE_PREFIX_PATH}/qml/QtQuick/Window.2 DESTINATION QtQuick)
  install(FILES ${CMAKE_PREFIX_PATH}/qml/QtQuick.2/plugins.qmltypes DESTINATION QtQuick.2)
  install(FILES ${CMAKE_PREFIX_PATH}/qml/QtQuick.2/qmldir DESTINATION QtQuick.2)
  install(FILES ${CMAKE_PREFIX_PATH}/qml/QtQuick.2/libqtquick2plugin.so DESTINATION QtQuick.2)

  #make sure that script name has the same name as the generated binary
  install(PROGRAMS ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.sh DESTINATION . RENAME ${PROJECT_NAME}.sh)
  include(CPack)
endif()
